"""a common dependency for command utilities."""

from os import path
import argparse
import functools
import inspect
import os
import subprocess
import sys

from typing import List, Optional, Union

# core decorators.

COMMANDS = []


def command(func):
    COMMANDS.append(func)
    return func


def noop(func):
    return func


def command_if(predicate):
    if predicate:
        return command
    else:
        return noop

# extra decorators.


class MustBeRootException(Exception):
    """you should be root, but you're not :("""
    pass


def must_be_root(func):
    @functools.wraps(func)
    def check_root_first(*args, **kwargs):
        if os.geteuid() != 0:
            raise MustBeRootException()
        func(*args, **kwargs)
    return check_root_first

# types.


def ReadableFilePath(value: str) -> str:
    if not path.isfile(value):
        raise argparse.ArgumentTypeError(f'{value} is not a file')
    return value


# helpers.

def run(args: List[str], check=True, return_stdout=False) -> Optional[str]:
    if return_stdout:
        p = subprocess.run(args, check=check, stdout=subprocess.PIPE)
        return p.stdout.decode('utf-8')
    subprocess.run(args, check=check)

# main.


def build_and_run_cli():
    parser = argparse.ArgumentParser(description=__doc__)
    subs = parser.add_subparsers()

    for func in COMMANDS:
        name = func.__name__.replace('_', '-')
        help = inspect.getdoc(func)

        cmd = subs.add_parser(name, help=help, description=help)
        cmd.set_defaults(func=func)

        def has_default(p): return p.default != inspect.Parameter.empty
        def is_List(a): return hasattr(
            a, '__origin__') and a.__origin__ is list

        signature = inspect.signature(func)
        for parameter in signature.parameters.values():
            name = parameter.name if not has_default(
                parameter) else f'--{parameter.name}'
            kwargs = {}
            if parameter.annotation == bool:
                kwargs['action'] = 'store_false' if parameter.default else 'store_true'
            elif is_List(parameter.annotation):
                kwargs['type'] = parameter.annotation.__args__[0]
                kwargs['nargs'] = '+'
            else:
                kwargs['type'] = parameter.annotation

            if has_default(parameter):
                kwargs['default'] = parameter.default
            cmd.add_argument(name, **kwargs)

    args = parser.parse_args()

    if 'func' not in args:
        parser.print_help()
    else:
        try:
            args.func(*[vars(args)[p]
                        for p in inspect.signature(args.func).parameters])
        except KeyboardInterrupt:
            print()
            sys.exit(1)
        except MustBeRootException:
            print('must be root')
            sys.exit(1)
